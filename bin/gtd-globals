#!/bin/bash
readonly LAST_TASK_NO_FILE='.metadata/lasttask' TASKS_FOLDER='tasks' STATUS_FOLDER='status' BACKGROUND_STATUS='background' CLOSED_STATUS='closed' NEW_STATUS='new' SOMEDAY_STATUS='someday' TODO_STATUS='todo' WAITING_STATUS='waiting' PRIORITY_FOLDER='priority' MEETINGS_FOLDER='meetings' LOW_PRIORITY='low' MEDIUM_PRIORITY='medium' HIGH_PRIORITY='high' DEFAULT_PRIORITY='medium' DEFAULT_STATUS='todo' OLD_JIRA_FOLDER='jira_old' PEOPLE_FOLDER='people' NOTES_FILE='notes.md' REMINDME_FILE='.remindme' REMINDME_REPEAT_FILE='.repeat' BIRTHDAY_FILE='.birthday' CREATED_DATE_FILE='.created_date' GTD_OUTPUT_SEPARATOR="±" GTD_OFFLINE_FILENAME='.gtd_offline' GTD_OFFLINE_SEPARATOR='++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' GTD_HOST="${HOST:-${HOSTNAME:-$(hostname -s)}}"

: "${GTD_DISPLAY_CONTEXT:=terminal}"
readonly LAST_PULL_FILENAME=".gtd_last_pull_time_${GTD_HOST}"

export LAST_TASK_NO_FILE TASKS_FOLDER STATUS_FOLDER BACKGROUND_STATUS CLOSED_STATUS NEW_STATUS SOMEDAY_STATUS TODO_STATUS WAITING_STATUS PRIORITY_FOLDER LOW_PRIORITY MEDIUM_PRIORITY HIGH_PRIORITY DEFAULT_STATUS DEFAULT_PRIORITY OLD_JIRA_FOLDER PEOPLE_FOLDER NOTES_FILE REMINDME_FILE REMINDME_REPEAT_FILE BIRTHDAY_FILE CREATED_DATE_FILE GTD_OUTPUT_SEPARATOR MEETINGS_FOLDER GTD_OFFLINE_FILENAME GTD_OFFLINE_SEPARATOR STATUS_WAITING_DAYS SEARCH_TERM MOVE_TO_STATUS GTD_CONNECTED GO_TO_TASK LAST_PULL_FILENAME GTD_DISPLAY_CONTEXT GTD_HOST

function is_num {
	if [[ "${1}" =~ ^[0-9]+$ ]]
	then
		echo 0
	else
		echo 1
	fi
}

function convert_to_shortname {
	if [[ "${1}" = 'b' ]]; then
		echo 'background'
	elif [[ "${1}" = 'c' ]]; then
		echo 'closed'
	elif [[ "${1}" = 'h' ]]; then
		echo 'high'
	elif [[ "${1}" = 'l' ]]; then
		echo 'low'
	elif [[ "${1}" = "n" ]]; then
		echo 'new'
	elif [[ "${1}" = 's' ]]; then
		echo 'someday'
	elif [[ "${1}" = 't' ]]; then
		echo 'todo'
	elif [[ "${1}" = 'w' ]]; then
		echo 'waiting'
	elif [[ "${1}" = 'm' ]]; then
		echo 'medium'
	else
		echo "${1}"
	fi
}

function assert_is_num {
	if ! [[ "${1}" =~ ^[0-9]+$ ]]
	then
		echo "${1} is not a number"
		exit 1
	fi
}

function extract_task_number_from_notes_file {
	local extracted_task_number="${1/${ROOT_FOLDER}\/${STATUS_FOLDER}\/${TODO_STATUS}\//}"
	local extracted_task_number="${extracted_task_number/\/${NOTES_FILE}/}"
	echo "${extracted_task_number}"
}

# https://misc.flogisoft.com/bash/tip_colors_and_formatting
function embolden {
	if [[ ${GTD_DISPLAY_CONTEXT} == 'terminal' ]]
	then
		echo -n -e '\033[1m'"${1}"'\033[0m'
	else
		echo -n "${1}"
	fi
}

function wipe_line {
	if [[ ${GTD_DISPLAY_CONTEXT} == 'terminal' ]]
	then
		echo -ne "\r\033[K"
	fi
}

# This function calculates the time difference between the current time and a target epoch time, echoing a description of the difference.
function time_diff_desc {
	target_epoch="${1}"
	now=$(gdate +%s || date +%s)
	diff=$((target_epoch - now))

	if ((diff <= 0)); then
		# negate the value
		diff=$(( -diff ))
	fi
	days=$((diff / 86400))
	hours=$(( (diff % 86400) / 3600 ))
	minutes=$(( (diff % 3600) / 60 ))

	output=""
	(( days > 0 )) && output+="$days days "
	(( hours > 0 )) && output+="$hours hours, "
	#(( minutes > 0 )) && output+="$minutes minutes "

	echo "$output"
}

# This function parses a date from a string representing seconds since epoch and formats it to a human-readable format.
function parse_date {
	date -d @"${1}" '+%d %b %Y, %H:%M' 2>/dev/null || gdate -d @"${1}" '+%d %b %Y, %H:%M'
}

function last_pull_check {
	if [[ ! -f "${ROOT_FOLDER}/${LAST_PULL_FILENAME}" ]]
	then
		touch "${ROOT_FOLDER}/${LAST_PULL_FILENAME}"
		DATE=$(date +%s) || DATE=$(gdate +%s)
		echo "${DATE}" > "${ROOT_FOLDER}/${LAST_PULL_FILENAME}"
	else
		LAST_PULL_TIME=$(cat "$ROOT_FOLDER/${LAST_PULL_FILENAME}")
		local current_time
		current_time=$(date +%s) || current_time=$(gdate +%s)
		if [[ $current_time -gt $((LAST_PULL_TIME + 3)) ]]
		then
			DATE=$(date +%s) || DATE=$(gdate +%s)
			echo "${DATE}" > "${ROOT_FOLDER}/${LAST_PULL_FILENAME}"
			echo -n Pulling gtd from remote...
			git_pull >/dev/null 2>&1 || true
			wipe_line
		fi
	fi
}


function enter_to_continue {
	if [[ "${GTD_DISPLAY_CONTEXT}" == terminal ]]
	then
		echo -n 'Enter to continue'
    	read -r
	fi
}

function git_pull {
	echo -n "Pulling git repo..."
	has_connection || exit 1
	git pull --rebase >/dev/null 2>&1
	wipe_line
}

function git_commit {
	MSG="${1}"
	has_connection || exit 1
	echo -n "Committing git repo with message: ${MSG}..."
	git commit -am "$MSG" >/dev/null 2>&1
	wipe_line
}

function git_push {
	echo -n "Pushing git repo..."
	has_connection || exit 1
	git push >/dev/null 2>&1
	wipe_line
}

function has_connection {
	# Wait a second, suppress output, be quiet and stop after first byte
	if [[ $GTD_CONNECTED == 1 ]] || timeout "1" curl -s --max-time 5 --output /dev/null --range 0-0 https://www.google.com
	then
		GTD_CONNECTED=1
		return 0
	fi
	echo "Offline, returning 1"
	return 1
}

# Fetch and rebase
if [ -f "${ROOT_FOLDER}/${GTD_OFFLINE_FILENAME}" ]
then
	if git fetch origin master >/dev/null 2>&1
	then
		GTD_CONNECTED=1
	fi
fi

if git diff --exit-code 2>/dev/null 1>&2 && [[ -z $(git status --porcelain --untracked-files=no) ]]
then
	# No local changes
	git rebase origin master >/dev/null 2>&1
fi
